version: "3"
services:
  postgres:
    image: postgis/postgis:16-3.4
    #command: "-c log_statement=all"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
  dbmate:
    build: db
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable
  graphql-engine:
    image: hasura/graphql-engine:v2.36.0
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      #HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_PASSWORD}
  postgrest:
    image: postgrest/postgrest:v12.0.2
    environment:
      PGRST_DB_URI: "postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres"
      PGRST_DB_ANON_ROLE: postgres # insecure
  wizard:
    build:
      context: wizard
    environment:
      PROCEDURE_URL: http://graphql-engine:8080/api/rest/import-data
      LOGGING: DEBUG
    tty: true
    stdin_open: true
  nginx:
    build: nginx
    ports:
      - 8000:80
volumes:
  pgdata:
